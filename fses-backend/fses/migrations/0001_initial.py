# Generated by Django 5.2.2 on 2025-06-17 20:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('OFFICE_ASSISTANT', 'Office Assistant'), ('SUPERVISOR', 'Supervisor'), ('PROGRAM_COORDINATOR', 'Program Coordinator'), ('PGAM', 'PGAM')], default='OFFICE_ASSISTANT', max_length=20)),
                ('is_first_time', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('title', models.IntegerField(choices=[(1, 'Professor'), (2, 'Associate Professor'), (3, 'Doctor')], default=3)),
                ('university', models.CharField(max_length=30)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fses.department')),
                ('staff', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('program', models.CharField(choices=[('PHD', 'PhD'), ('MPHIL', 'MPhil'), ('DSE', 'DSE')], default='PHD', max_length=10)),
                ('semester', models.PositiveSmallIntegerField(default=1)),
                ('evaluation_type', models.CharField(choices=[('FIRST_EVALUATION', 'First Evaluation'), ('RE_EVALUATION', 'Re-Evaluation')], default='FIRST_EVALUATION')),
                ('co_supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='co_supervisor_id', to='fses.lecturer')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fses.department')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervisor_id', to='fses.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Nomination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('research_title', models.CharField(blank=True, max_length=150, null=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('chairperson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chairperson_id', to='fses.lecturer')),
                ('examiner1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examiner_1_id', to='fses.lecturer')),
                ('examiner2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examiner_2_id', to='fses.lecturer')),
                ('examiner3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examiner_3_id', to='fses.lecturer')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fses.student')),
            ],
        ),
    ]
